$z-index-modal: 99990; // wpadminbar is 99999
$z-index-normal: 100;
$z-index-low: 0;

$brightness-base: ( ( 50 *( $basics_brightness / 90) ) + 5 ) / 1.5;

$breakpoint-max-mobile: $basics_breakpoint_mobile - 1px;
$breakpoint-min-tablet: $basics_breakpoint_mobile + 0px;
$breakpoint-max-tablet: $basics_breakpoint_tablet - 1px;
$breakpoint-min-desktop: $basics_breakpoint_tablet + 0px;

@if $basics_effects_animations {

  @keyframes slideDown {
    0%, 100% {
      transform-origin: top center;
    }
    from {
      opacity: 0;
      transform: scale(1, 0);
    }
  }

  @keyframes opacityMoveDown {
    0%, 100% {
      transform-origin: top center;
    }
    from {
      opacity: 0;
      transform: translateY(-100%);
    }
  }

  @keyframes opacity {
    from {
      opacity: 0;
    }
  }

}

/**
 * Produce readable inverted color based on color. black -> white, white -> black and etc.
 */
@function colorInvert($color, $coef: 50) {
  $ci: desaturate(adjust_hue($color, 15deg), 20%);
  $sat: saturation($color);
  $lci: lightness($ci);
  $lc: lightness($color);
  $scoef: $sat * 1.5;
  @if ($scoef < 10) {
    $scoef: 65;
  }
  @if $lc > $scoef or $lc > 85 {
    $ci: darken($ci, $coef);
  } @else {
    $ci: lighten($ci, 100% - $lc);
  }
  @return $ci;
}

@mixin border($color, $pos: null, $width: null) {
  @if $width == null {
    $width: $basics_bordering;
  }
  border#{$pos}: $width * 1px solid rgba($color, $brightness-base / 100);
}

@function opa($color) {
  @return rgba($color, $brightness-base / 1.5 / 100);
}

@function muted($color, $amount: 50%) {
  @return mix($color, colorInvert($color), $amount);
}

@mixin shadow() {
  @if ($basics_effects_shadows) {
    box-shadow: 0 0 12px rgba($region_root_color_foreground, .12);
  }
}

@mixin shadowBottom() {
  @if ($basics_effects_shadows) {
    box-shadow: 0 12px 12px -12px $region_root_color_foreground;
  }
}

@mixin roundness($pos: '', $coef: 1) {
  @if $basics_roundness {
    $val: ( $basics_roundness / ( 50 / $coef ) ) + 'em';
    @if $pos == '' {
      border-radius: $val;
    } @else if $pos == 'top' {
      border-top-left-radius: $val;
      border-top-right-radius: $val;
    } @else if $pos == 'bottom' {
      border-bottom-left-radius: $val;
      border-bottom-right-radius: $val;
    }
  }
}

/**
 * Background image
 */
@mixin backgroundImage($image, $size, $scroll, $repeat, $x, $y) {
  @if $image {
    background-image: url($image);
    @if $size {
      background-size: $size;
    }
    @if $scroll {
      background-attachment: scroll;
    } @else {
      background-attachment: fixed;
    }
    @if $repeat {
      background-repeat: repeat;
    } @else {
      background-repeat: no-repeat;
    }
    @if $x {
      background-position-x: $x;
    }
    @if $y {
      background-position-y: $y;
    }
  }
}

/**
 * Region Colors
 */
@mixin regionColors($foreground: null, $background: null, $background_opacity: 100, $primary_color: null, $secondary_color: null) {

  @if ($background) {

    @if ($background_opacity == 0) {
      background-color: transparent;
    } @else if ($background_opacity < 100) {
      background-color: rgba($background, ($background_opacity / 100));
    } @else {
      background-color: $background;
    }
  }

  @if ($foreground) {
    color: $foreground;
  }

  @if ($primary_color and $primary_color != $region_root_color_primary) {
    a {
      color: $primary_color;
    }
  }

  @if ($secondary_color and and $secondary_color != $region_root_color_secondary) {
    a:hover {
      color: $secondary_color;
    }
  }

  @if (
    $background and $foreground and $primary_color and $secondary_color
      and ( $background != $region_main_color_background or $foreground != $region_root_color_foreground or $primary_color != $region_root_color_primary or $secondary_color != $region_root_color_secondary )
  ) {

    input,
    textarea,
    .wp-editor-container,
    .select2-container .select2-selection--single,
    .select2-container .select2-choice {
      @include border($foreground);
      background-color: transparent;
      &:focus {
        border-color: $primary_color;
      }
    }
    select {
      background-color: $background;
      @include border($foreground);
      &:focus {
        border-color: $primary_color;
      }
    }

    .button,
    button,
    input[type="button"],
    input[type="reset"],
    input[type="submit"] {
      @include button($background, $foreground, $primary_color, $secondary_color);
      &.secondary {
        @include button($background, $foreground, $secondary_color, $primary_color);
      }
    }
  }

}

@mixin button($background, $foreground, $color, $secondary: $background, $style: $typography_form_button_style) {

  @include roundness();

  @if $basics_effects_animations {
    transition: color $basics_effects_animations + ms ease-in-out,
                border-color $basics_effects_animations + ms ease-in-out,
                background $basics_effects_animations + ms ease-in-out;
  }

  @if $typography_font_button_text_style {
    @if $typography_font_button_text_style == 'uppercase' {
      text-transform: uppercase;
    } @else {
      font-variant: $typography_font_button_text_style;
    }
  }

  @if $style == 'border' {
    border: ($basics_bordering + px) solid $color;
    background: transparent;
    color: $color;
    &:hover,
    &:focus {
      background-color: $color;
      border-color: $color;
      color: $background;
    }
  } @else if $style == 'fill' {
    border: ($basics_bordering + px) solid $color;
    color: $background;
    background: $color;
    &:hover,
    &:focus {
      background-color: mix($color, $foreground, 80%);
      border-color: mix($color, $foreground, 80%);
      color: $background;
    }
  } @else if $style == 'gradient' {
    color: $background;
    border: $basics_bordering + px solid $color;
    border-image: linear-gradient(to bottom right, $color, $secondary) 1;
    background: $color;
    background-image: linear-gradient(to bottom right, $color, $secondary);
    &:hover,
    &:focus {
      background-color: mix($color, $foreground, 80%);
      background-image: linear-gradient(to bottom right, muted($color), $color);
      border-color: mix($color, $foreground, 80%);
      color: $background;
    }
  } @else {
    color: $color;
    font-weight: bold;
    &:hover,
    &:focus {
      text-decoration: underline;
    }
  }

  cursor: pointer;
}

@mixin horizontalMenu($background: $region_root_color_background, $foreground: $region_root_color_foreground, $style: 'bold') {
  position: relative;

  @media (max-width: $breakpoint-min-tablet) {
    display: block;
    overflow-x: auto;
    overflow-y: hidden;
    white-space: nowrap;
  }

  align-items: stretch;

  .depth-0 {

    display: table-cell;
    vertical-align: middle;
    position: static;

    > a {
      padding: .6rem 1rem;
      @media (max-width: $breakpoint-min-tablet) {
        padding: 1rem;
      }
      position: relative;
      text-decoration: none;
      font-weight: inherit;
    }

    > .sub-menu {
      display: none;
      margin: 0;
    }

    &.current-menu-ancestor,
    &.current-menu-item {
      @if $style == 'border-top' {
        border-top: .28rem solid $region_primary_menu_color_foreground;
      } @else if $style == 'border-bottom' {
        border-bottom: .28rem solid $region_primary_menu_color_foreground;
      } @else if $style == 'underline' {
        > a {
          text-decoration: underline;
        }
      } @else if $style == 'bold' {
        > a {
          font-weight: bolder;
        }
      } @else if $style == 'background' {
        background: $background;
        > a {
          color: $foreground;
        }
      } @else if $style == 'color-primary' {
        > a {
          color: $region_root_color_primary;
        }
      } @else if $style == 'color-secondary' {
        > a {
          color: $region_root_color_secondary;
        }
      }
    }

    @media (min-width: $breakpoint-min-desktop) {

      // @TODO consider if to show arrows or not.
      //&.menu-item-has-children,
      //&.menu-item-type-tinsta-nav-menu-widget-area {
      //  > a:after {
      //    @extend %la;
      //    content: $la-angle-down;
      //    font-size: .6rem;
      //    margin-left: .6rem;
      //  }
      //}

      > .sub-menu {
        position: absolute;
        z-index: $z-index-modal;
        white-space: nowrap; // fix for with auto.
        overflow-x: hidden;
        top: 100%;

        min-width: 13.2rem;
        max-width: 100%;
        width: auto;
        max-height: 80vh;

        margin-left: unset;
        margin-right: unset;

        box-shadow: 0 7px 28px -12px rgba(0, 0, 0, .9);
        color: $foreground;
        background-color: $background;

        a {
          color: $foreground;
          padding: .6rem;
        }

        > .sub-menu-inner {
          display: table;
          border-spacing: 1rem;
          table-layout: fixed;
          //min-width: 24rem;
          .widget {
            display: table-cell;
            vertical-align: top;
            white-space: normal;
            //min-width: 12rem;
          }
        }

      }
      &.menu-item-type-tinsta-nav-menu-widget-area > .sub-menu {
        width: 100%;
      }
      //&:target,
      &:hover {
        background: $background;
        > a {
          color: $foreground;
        }
        > .sub-menu {
          display: block;

          @if $basics_effects_animations {
            animation: slideDown $basics_effects_animations + ms ease-in-out 1;
            animation-fill-mode: backwards;
          }

        }
      }
    }

  }
}

%no-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-touch-callout: none;
  -ms-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

%wrapper {
  margin-left: auto;
  margin-right: auto;
  @if $region_root_width and not $region_root_width_full {
    max-width: $region_root_width + px;
  } @else {
    max-width: calc( 100% - 2rem );
  }
  min-width: 300px;
  width: 100%;
}

%small {
  font-size: .92rem;
}

%big {
  font-size: 1.22rem;
}

%bigger {
  font-size: 1.44rem;
}

%clearfix {
  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

%disabled {
  filter: grayscale(100%);
}

%message {
  background-color: #eee;
  border: 2px solid #e3e3e3;
  color: #777;
  margin: 2rem auto;
  padding: 1.6rem;
  text-align: center;
  @include roundness();
}

%ok {
  background-color: #e6ffdb;
  border-color: #cfeac4;
  color: #104c10;
}

%error {
  background-color: #ffebe0;
  border-color: #ead2c6;
  color: #845f4c;
}

%info {
  background-color: #ebf6fb;
  border-color: #dbedee;
  color: #3d6380;
}

%warning {
  background-color: #fdfddc;
  border-color: #efe8cc;
  color: #79680a;
}

%notice {
  background-color: $region_main_color_background;
  border-bottom: none;
  border-right: none;
  border-top: none;
  border-left-width: 2px;
  margin: 2rem auto;
  padding: 1.6rem;
  text-align: inherit;
  border-radius: 0;
}